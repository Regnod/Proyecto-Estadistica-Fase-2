# pop = '''7.226026  9.784333 10.477954 10.094622  8.030822 10.145757  9.479445
#  9.238109  7.222853  8.757596 14.349953  7.613519  9.747325 13.649488
#  5.264572  7.694737 12.506772  7.996138  2.463201  8.583532  9.219848
#  7.264236 10.808290  7.364800  6.164957  8.560567  8.637853  6.877815
#  6.165798  9.338337  6.202626  8.346271  5.662605  7.184200  4.834463
#  6.787508  8.457616  5.556986 10.711393  9.078894  6.603609 11.089599
#  8.127042 10.854287  6.926028  5.733283  5.995366  3.537566  7.108472
#  7.798674 10.246622  6.913552  8.848234  7.666478 10.075086  6.790771
#  8.397960 11.281964  6.447305  9.751770  4.887428 11.155446  6.912197
#  9.016313  6.844666  7.045721  5.566866 10.048841  6.900377  5.581776
#  8.110889  4.544673  6.309025  7.617035  9.425581 10.635326 11.594073
# 11.416478  7.752857  8.189101  5.188505  7.907476  8.556570  9.245212
#  8.071844  7.368970  6.172574 11.554551  8.400359  5.139840  8.614306
#  9.205468 10.390804  9.958101 12.156894  8.042393  7.302386  8.615319
# 10.660839  6.902333 10.421456 11.133231  6.190969  6.441921  9.065285
#  8.252282  7.066784  8.276077  6.735104 10.013773 12.903302  6.221358
#  3.943612 10.967709  7.831190  5.042615 10.998591  6.788639 10.047301
#  5.696252  7.753447  8.420131  5.166031  4.975951 10.996939 12.802646
# 13.224401  5.353899  5.522828  5.461580  8.052718  7.776844  9.791537
#  6.228126  7.354614  8.501468  6.561946  6.713134  4.885928  8.010446
#  7.852032  5.559175  7.260248  9.175388  5.360669  6.365582  8.625698
#  6.585940  6.648951  8.754259  9.266029  8.590263  7.305708  5.837616
#  8.557287  8.101995  7.783305  5.856765  6.345568  8.520423  6.535928
#  8.533945  9.901855  5.820093  6.632037  7.707810  9.797457  6.742263
# 12.076428  6.681680 11.688844  8.854582  6.895396  9.974811  5.979209
#  7.599946  5.873196  9.145245  6.409224  9.482933  5.513435  7.846742
#  7.215701  6.259786  4.649149 11.074172 10.480505  8.800415  5.002580
#  8.106729  5.685155  5.753204 11.185925  5.560240  7.024327  6.238125
#  4.633748  8.996821  6.690109  5.592419  7.952272  8.982989  6.405688
#  8.713011  7.259253  5.976882  9.566430  4.198974  6.977677  8.564648
#  9.119476  4.853609  5.886969  5.070373 10.228862  9.308793  6.589608
#  6.910532  7.227891  5.330007 10.606708  9.289594  6.755549 10.659246
#  8.768670  8.518554  5.957778  7.357927  8.751532  7.495823  6.080270
#  3.646197  9.933132  6.402228  5.696322 10.202230  7.501796  7.989278
#  6.279775  7.796657  8.212837  7.106850  3.003090  6.946439  6.825121
#  5.735952  8.490143  4.877303  8.650875  9.841699  7.832335  8.590114
# 11.175813 10.222964  7.985408  6.394214  5.775655  5.653130  7.905346
# 10.124617 10.643463  8.316997  6.631691  8.132296  5.562277  8.416625
#  7.712934 11.537907 11.759090  7.971743  6.981153  5.993574  5.578730
#  9.077283 10.834106  9.557259  3.949449 10.920139  6.570866  8.575442
#  7.482698 11.294167  7.417537  9.527678  8.935597  7.587614  9.316753
#  7.305732 10.270386  4.725233  7.462365 10.893404  8.904653 10.743234
#  7.705923  8.235609  7.842241  7.830208  8.788480  8.178611 10.106225
#  8.539067 11.972679  3.682285  7.737158 11.284222  7.877469  7.915682
#  8.062378  9.502957  5.812837  6.858820  9.962757  8.253741  4.630031
#  7.180448  5.558734  6.626882  8.690770  4.450740 10.666865  8.368537
#  4.853658  4.069594  9.117024  8.141222  8.398854  5.586098  5.060747
#  9.554901  9.562920  6.367764  7.579271  8.048279  8.771223  5.730588
#  3.953291 11.262299  6.521111  9.417867  7.495632 10.094702  8.545020
#  7.428717  6.289843  8.165547  6.234263 11.413472  6.379132  7.327179
#  6.377082 12.612208 12.223245 10.154320 11.552076 10.652795  5.324858
#  8.680729  7.035105  4.424813  7.755091  8.186632 10.623870 11.190949
#  8.842895  9.476478  7.116519  7.813070  8.392734  7.487275  7.144278
#  9.840193  8.423265  8.379874  8.047071  9.474728  7.567365  8.645323
#  3.952853  8.766317  8.596344  8.566765  5.439483  9.553382  7.367125
#  8.790233  9.120364  3.036864  4.806813 11.086896  7.319846  7.906620
#  6.478383  8.354732  6.500333  5.824536  5.399588  6.221742  6.634290
#  6.677902 10.136757  6.932971  7.426406 14.126784 11.218563  5.934157
#  6.779306  8.040263  7.861323  7.492231  8.682066  7.680347  5.665132
#  8.922659  8.472203  8.327765  9.963047  4.627209  9.165220  8.716857
#  7.238978 10.874612  7.762046 10.106194 10.385755  7.596304  9.561036
#  8.601753  5.952652  6.163470  4.622277  8.013038  9.639130  7.917436
#  5.440277 10.187300  7.999778 10.051689  6.625934  9.705802  9.576374
#  4.960591  5.336650  6.751722  9.639441 10.353130  8.975485  9.714009
#  6.989399 10.728459  7.644389 12.765776  4.411726  9.305556  9.170776
#  4.899299  8.959497  3.233440  7.247101  9.347664  9.503588  5.873324
#  4.487671  7.645145  4.057579  6.862816 10.609253  7.908579  8.826388
#  7.337121  8.319103  8.456925  8.907909  7.909544  7.140148  8.352245
#  8.510008  7.308184  6.687767  6.783008  7.819157 10.542401  7.212098
#  9.619803  8.558728  5.220979  6.928968  4.750718  7.356165  7.932240
#  8.851165  6.592171 10.171689  2.050498  7.912372  8.489298  8.897780'''

# population = pop.split('\n')
# population2 = []
# for row in population:
#     if row == '':
#         continue
#     for num in row.split():
#         population2.append(num)

# with open('./population.csv','w') as f:
#     f.write('value\n')
#     for data in population2:
#         f.write(data)
#         f.write('\n')
data = []
with open('./2014_nba_draft_combine.csv','r') as f:
    first_line = f.readline().split(",")
    for col in first_line:
        data.append((col, []))
    line = f.readline()
    while line:
        splitted_line = line.split(",")
        i = 0
        for col in splitted_line:
            data[i][1].append(col)
print(data[0])
    

d = '10.78 10.81 12.05 11.20 11.00 11.30 11.39 11.15 12.63 10.75 11.46 10.95 11.28 11.32 11.10 11.28 11.06 11.22 11.00 11.60 11.26 11.61 11.92 11.11 11.57 12.13 12.15 10.76 11.07 11.45 12.71 10.83 11.60 11.97 11.63 10.82 12.62 11.55 10.80 10.79 11.45 11.12 11.18 11.21 11.57 11.55 11.60 11.10 11.39 11.12 11.48 10.42'

numbers = d.split()
mean = sum([float(i) for i in numbers])/len(numbers)
print(mean)
